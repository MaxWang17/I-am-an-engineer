{"code":"import { isObject } from \"@vue/shared/src\";\r\nimport { mutableHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers, } from './baseHandlers';\r\nexport function reactive(target) {\r\n    return createReactiveObject(target, false, mutableHandlers);\r\n}\r\nexport function shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers);\r\n}\r\nexport function readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers);\r\n}\r\nexport function shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers);\r\n}\r\n// 是不是只读，是不是深度。完全可以用参数配置，所以考虑柯里化，公用同一个方法（省的写四遍）\r\n// vue3响应式底层核心原理是：new Proxy  其本质还是操作get和set\r\nconst reactiveMap = new WeakMap(); // 会自动垃圾回收，不会造成内存泄露，存储的key只能是对象\r\nconst readonlyMap = new WeakMap();\r\nexport function createReactiveObject(target, isReadonly, baseHanelers) {\r\n    // 如果目标不是对象，没法拦截了，reactive这个api只能拦截对象类型\r\n    if (!isObject(target)) {\r\n        return target;\r\n    }\r\n    // 如果某个对象已经被代理，就不要再次代理\r\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap;\r\n    const exisProxy = proxyMap.get(target);\r\n    if (exisProxy) {\r\n        return exisProxy;\r\n    }\r\n    // 发现未被代理，那么代理一下，并存储到map里以备查询\r\n    const proxy = new Proxy(target, baseHanelers);\r\n    proxyMap.set(target, proxy); // 将要代理的对象和对应的代理结果缓存起来\r\n    return proxy;\r\n}\r\n","references":["E:/私人/I-am-an-engineer/Vue/Vue3SC/packages/shared/src/index.ts","E:/私人/I-am-an-engineer/Vue/Vue3SC/packages/reactivity/src/baseHandlers.ts"]}
