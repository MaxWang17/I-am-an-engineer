{"code":"// 实现关键的Handelr，里面有get、有set\r\nimport { extend, isObject } from \"@vue/shared/src\";\r\nimport { reactive, readonly } from \"./reactive\";\r\n// 考虑1：是不是仅读，仅读的属性set时会报异常\r\n// 考虑2：是不是深度\r\nlet readonlyObj = {\r\n    set: (target, key) => {\r\n        console.warn(`set on key  ${key} failed`);\r\n    },\r\n};\r\nconst get = createGetter();\r\nconst shallowGet = createGetter(false, true);\r\nconst readonlyGet = createGetter(true);\r\nconst shallowReadonlyGet = createGetter(true, true);\r\nconst set = createSetter();\r\nconst shallowSet = createSetter(true);\r\nconst mutableHandlers = {\r\n    get,\r\n};\r\nconst shallowReactiveHandlers = {\r\n    get: shallowGet,\r\n};\r\nconst readonlyHandlers = extend({\r\n    get: readonlyGet,\r\n}, readonlyObj);\r\nconst shallowReadonlyHandlers = extend({\r\n    get: shallowReadonlyGet,\r\n}, readonlyObj);\r\nexport { mutableHandlers, shallowReactiveHandlers, readonlyHandlers, shallowReadonlyHandlers, };\r\nfunction createGetter(isReadonly = false, isShallow = false) {\r\n    // 核心拦截方法\r\n    return function get(target, key, receiver) {\r\n        // let proxy = reactivee()\r\n        // proxy + reflect(后续obiect上的方法会被迁移到reflect)\r\n        // 在以前，target[key] = vlaue 可能会失败（如果target只读），并不会报异常，也没有返回值标识\r\n        // reflect方法具备返回值\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (!isReadonly) {\r\n            // 收集依赖，会等数据变化后更新对应的视图\r\n        }\r\n        if (isShallow) {\r\n            return res;\r\n        }\r\n        if (isObject(res)) { // vue2 是一上来就递归，vue3 是当取值时会进行代理。vue3的代理模式是懒代理。\r\n            return isReadonly ? readonly(res) : reactive(res);\r\n        }\r\n        return res;\r\n    };\r\n}\r\nfunction createSetter(isShallow = false) {\r\n    // 核心设置方法\r\n    return function set(target, key, value, receiver) {\r\n        const res = Reflect.set(target, key, value, receiver);\r\n        return res;\r\n    };\r\n}\r\n","references":["E:/私人/I-am-an-engineer/Vue/Vue3SC/packages/shared/src/index.ts","E:/私人/I-am-an-engineer/Vue/Vue3SC/packages/reactivity/src/reactive.ts"]}
