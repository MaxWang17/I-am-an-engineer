{"code":"export function effect(fn, options = {}) {\r\n    // 我需要effect变成响应式的，数据变化可以重新执行\r\n    const effect = createReactiveEffect(fn, options);\r\n    if (!options.lazy) {\r\n        // 利用配置的lazy属性\r\n        effect(); // 响应式的effect会默认先执行一次\r\n    }\r\n    return effect;\r\n}\r\nlet uid = 0;\r\nlet activeEffect; // 存储当前正在运行的effect\r\nconst effectStack = []; // 存储用的栈\r\nfunction createReactiveEffect(fn, options) {\r\n    const effect = function reactiveEffect() {\r\n        if (!effectStack.includes(effect)) {\r\n            // 保证effect不在栈里才执行\r\n            // 函数执行可能报错，所以用try-finally兜底一下\r\n            try {\r\n                effectStack.push(effect);\r\n                activeEffect = effect; // 头秃写法\r\n                return fn();\r\n            }\r\n            finally {\r\n                // 不管有无异常都执行\r\n                effectStack.pop();\r\n                activeEffect = effectStack[effectStack.length - 1];\r\n            }\r\n        }\r\n    };\r\n    effect.id = uid++; // 制作一个effect标识，用于区分effect\r\n    effect._isEffect = true; // 用于标识这个是响应式effect\r\n    effect.row = fn; // 保留effect对应的原函数\r\n    effect.options = options; // 在effect上保存用户的属性\r\n    return effect;\r\n}\r\n// 让，某个对象中的属性，收集当前它对应的effect\r\nconst targetMap = new WeakMap();\r\nexport function track(target, type, key) {\r\n    // activeEffect; // 关联已创建，你学废了吗\r\n    if (activeEffect === undefined) {\r\n        // 此属性不用收集依赖，因为没在effect中使用\r\n        return;\r\n    }\r\n    let depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        //初次取值找不到\r\n        targetMap.set(target, (depsMap = new Map()));\r\n    }\r\n    let dep = depsMap.get(key);\r\n    if (!dep) {\r\n        depsMap.set(key, (dep = new Set()));\r\n    }\r\n    if (!dep.has(activeEffect)) {\r\n        dep.add(activeEffect);\r\n    }\r\n    console.log(targetMap, \"勇敢的少年快去创造奇迹\");\r\n}\r\n// 需求场景1：\r\n// 以下是头秃写法的坑，为了解决这种顺序错乱的问题，要搞个栈做处理（先进后出，弹夹）\r\n// 原理：函数调用是是个栈型结构\r\n// effect(()=>{ // effect1\r\n//     state.name // => effect1\r\n//     effect(()=>{ // effect2\r\n//         state.age // => effect2\r\n//     })\r\n//     state.sex // 按逻辑应该是effect1，但是如果没有一个栈做处理，就会变成effect2了\r\n// })\r\n// 需求场景2：\r\n// 如果对于effect是否已入栈不检查，以下就会出现死循环\r\n// effect(()=>{\r\n//     state.xxx++\r\n// })\r\n//# sourceMappingURL=effect.js.map","references":[],"map":"{\"version\":3,\"file\":\"effect.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../packages/reactivity/src/effect.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,UAAU,MAAM,CAAC,EAAE,EAAE,UAAe,EAAE;IAC1C,6BAA6B;IAC7B,MAAM,MAAM,GAAG,oBAAoB,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAEjD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;QACjB,cAAc;QACd,MAAM,EAAE,CAAC,CAAC,qBAAqB;KAChC;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,IAAI,GAAG,GAAG,CAAC,CAAC;AACZ,IAAI,YAAY,CAAC,CAAC,kBAAkB;AACpC,MAAM,WAAW,GAAG,EAAE,CAAC,CAAC,QAAQ;AAChC,SAAS,oBAAoB,CAAC,EAAE,EAAE,OAAO;IACvC,MAAM,MAAM,GAAG,SAAS,cAAc;QACpC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACjC,kBAAkB;YAClB,8BAA8B;YAC9B,IAAI;gBACF,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACzB,YAAY,GAAG,MAAM,CAAC,CAAC,OAAO;gBAC9B,OAAO,EAAE,EAAE,CAAC;aACb;oBAAS;gBACR,YAAY;gBACZ,WAAW,CAAC,GAAG,EAAE,CAAC;gBAClB,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACpD;SACF;IACH,CAAC,CAAC;IACF,MAAM,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC,0BAA0B;IAC7C,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,mBAAmB;IAC5C,MAAM,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC,iBAAiB;IAClC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,kBAAkB;IAC5C,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,4BAA4B;AAC5B,MAAM,SAAS,GAAG,IAAI,OAAO,EAAE,CAAC;AAChC,MAAM,UAAU,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,GAAG;IACrC,+BAA+B;IAC/B,IAAI,YAAY,KAAK,SAAS,EAAE;QAC9B,0BAA0B;QAC1B,OAAO;KACR;IACD,IAAI,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACpC,IAAI,CAAC,OAAO,EAAE;QACZ,SAAS;QACT,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;KAC9C;IACD,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;KACrC;IACD,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;QAC1B,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;KACvB;IACD,OAAO,CAAC,GAAG,CAAC,SAAS,EAAC,aAAa,CAAC,CAAA;AACtC,CAAC;AAED,SAAS;AACT,2CAA2C;AAC3C,iBAAiB;AACjB,0BAA0B;AAC1B,+BAA+B;AAC/B,8BAA8B;AAC9B,kCAAkC;AAClC,SAAS;AACT,2DAA2D;AAC3D,KAAK;AAEL,SAAS;AACT,+BAA+B;AAC/B,eAAe;AACf,kBAAkB;AAClB,KAAK\"}"}
